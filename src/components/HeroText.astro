---
interface Props {
  animationName: 'phase' | 'spin';
}

const { animationName } = Astro.props;

const phase = animationName === 'phase';
const spin = animationName === 'spin';
---

<script define:vars={{ phase }}>
  /**
   * Gradient hero text
   */
  // https://joshwcomeau.com/react/rainbow-button/#a-vanilla-js-demo
  // See app.pcss for custom properties
  const rainbowColors = [
    'yellow',
    '#843ff3',
    'cadetblue', // TODO should be aquamarine in dark mode
  ];
  const paletteSize = rainbowColors.length;
  // Number of milliseconds for each update
  const intervalDelay = 1500;
  const colorNames = [
    '--magic-rainbow-color-0',
    '--magic-rainbow-color-1',
    '--magic-rainbow-color-2',
  ];
  let cycleIndex = 0;
  let gradientIntervalId;

  // Register properties
  colorNames.forEach((name, index) => {
    CSS.registerProperty({
      name,
      syntax: '<color>',
      inherits: false,
      initialValue: rainbowColors[index],
    });
  });

  function setGradientColorCustomProperties(colors) {
    const textElem = document.getElementById('hero-text');

    // Apply these new colors, update the DOM.
    colorNames.forEach((name, index) => {
      textElem.style.setProperty(name, colors[index]);
    });
  }

  function activateMagicGradient() {
    // Shift every color up by one position.
    //
    // `% paletteSize` is a handy trick to ensure
    // that values "wrap around"; if we've exceeded
    // the number of items in the array, it loops
    // back to 0.
    const nextColors = [
      rainbowColors[(cycleIndex + 1) % paletteSize],
      rainbowColors[(cycleIndex + 2) % paletteSize],
      rainbowColors[(cycleIndex + 3) % paletteSize],
    ];

    setGradientColorCustomProperties(nextColors);

    // increment the cycle count, so that we advance
    // the colors in the next loop.
    cycleIndex++;
  }

  if (phase) {
    gradientIntervalId = window.setInterval(
      activateMagicGradient,
      intervalDelay
    );
  } else {
    clearInterval(gradientIntervalId);
  }
</script>

<h1 id="hero-text" class:list={[{ phase, spin }]} on:hover>
  <slot />
</h1>

<style>
  #hero-text {
    font-size: 3rem;
    font-weight: 900;
    margin-block: 0;

    /* Gradient background */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;

    /* fallback for unsupported browsers */
    background-color: var(--color-purple);

    &.phase {
      background-image: radial-gradient(
        circle at top left,
        var(--magic-rainbow-color-0) 0,
        var(--magic-rainbow-color-1),
        var(--magic-rainbow-color-2) 70%
      );

      /* CSS Houdini Magic */
      /* https://joshwcomeau.com/react/rainbow-button/#a-vanilla-js-demo */
      transition:
        --magic-rainbow-color-0 1500ms linear,
        --magic-rainbow-color-1 1500ms linear,
        --magic-rainbow-color-2 1500ms linear;
    }

    /* https://codepen.io/jlengstorf/pen/WNPGMJo */
    &.spin {
      display: inline-block;
      animation: spin 2.5s infinite linear;
      background-image: conic-gradient(
        from var(--bg-angle) at 78.7% 33.2% in oklch shorter hue,
        var(--color-purple),
        cadetblue,
        yellow,
        cadetblue,
        var(--color-purple)
      );
    }
  }

  @property --bg-angle {
    inherits: false;
    initial-value: 0deg;
    syntax: '<angle>';
  }

  @keyframes spin {
    to {
      --bg-angle: 360deg;
    }
  }
</style>
